@page "/AddFamily"
@using Assignment2_3.Data
@using Assignment2_3.Models
@using System.Security
@using System.Linq
@using System.Linq.Expressions
@inject IFamilyService FamilyService;
@inject IAdultService AdultService;
@inject NavigationManager NavigationManager
@attribute [Authorize]


<div class="text-left text-monospace font-weight-light ml-3">
    <h3>Add a new family</h3>
</div>
<hr/>

<div class="d-flex flex-row">
    <div class="d-flex flex-column mt-5 mb-2 mr-5">
        <EditForm Model="@newFamily" OnValidSubmit="@AddNewFamily">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                House Number: <br/>
                <InputNumber @bind-Value="newFamily.HouseNumber"/>
            </div>
            <div>
                Street Name: <br/>
                <InputText @bind-Value="newFamily.StreetName"/>
            </div>
            <div>
                Adults: <br/>
            </div>
            <InputSelect @bind-Value="firstAdult">
                <option></option>
                @foreach (var adult in singleAdults)
                {
                    <option>@adult.Id @adult.FirstName @adult.LastName</option>
                }
            </InputSelect>
            <InputSelect @bind-Value="secondAdult">
                <option></option>
                @foreach (var adult in singleAdults)
                {
                    <option>@adult.Id @adult.FirstName @adult.LastName</option>
                }
            </InputSelect>
        
            <div class="mt-2">
                <p class="actions">
                    <button class="btn btn-outline-success" type="submit">Create Family</button>
                </p>
            </div>
        </EditForm>
    </div>
    <div class="d-flex flex-column ml-3 mr-3 mt-5">
        @* container for child form *@
        <h3>Add Child</h3>
        <EditForm Model="@newChild">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div>
                <p class="text-info">
                    Children added: @childrenMessage
                </p>
            </div>
            <div class="d-flex flex-row">
                <div class="form-group mr-2">
                    *First Name: <br/>
                    <InputText @bind-Value="newChild.FirstName"/>
                </div>
                <div class="form-group">
                    *Last Name: <br/>
                    <InputText @bind-Value="newChild.LastName"/>
                </div>
            </div>
            <div class="form-group">
                Hair Colour: <br/>
                <InputText @bind-Value="newChild.HairColor"/>
            </div>
            <div class="form-group">
                *Eye Colour: <br/>
                <InputText @bind-Value="newChild.EyeColor"/>
            </div>
            <div class="d-flex flex-row">
                <div class="form-group mr-2">
                    *Age: <br/>
                    <InputNumber @bind-Value="newChild.Age"/>
                </div>
                <div class="form-group mr-2">
                    *Weight: <br/>
                    <InputNumber @bind-Value="newChild.Weight"/>
                </div>
                <div class="form-group mr-2">
                    *Height: <br/>
                    <InputNumber @bind-Value="newChild.Height"/>
                </div>
            </div>
            <div class="form-group">
                *Sex <br/>
                <InputSelect @bind-Value="newChild.Sex">
                    <option></option>
                    <option>M</option>
                    <option>F</option>
                </InputSelect>
            </div>
            <hr style="width: auto; color: black!important;"/>
            <div class="d-flex flex-column">
                <h3>Add child interest(s)</h3>
                <div>
                    <p class="text-info">Added interests: @interestMessage</p>
                </div>
                <div class="form-group">
                    Add Child Interest:
                    <InputText @bind-Value="interestString"/>
                </div>
                <div class="mt-2">
                    <p class="actions">
                        <button class="btn btn-outline-success" type="button" @onclick=@(() => AddNewInterest())>Add Interest</button>
                    </p>
                </div>
            </div>
        </EditForm>
        <div class="d-flex flex-column">
            <h3>Add child pet(s)</h3>
            <EditForm Model="@newPet">
                <div>
                    <p class="text-info">Added pets: @petMessage</p>
                </div>
                <div class="form-group">
                    Add Pet Name:
                    <InputText @bind-Value="newPet.Name"/>
                </div>
                <div class="form-group">
                    Add Pet Species:
                    <InputText @bind-Value="newPet.Species"/>
                </div>
                <div class="form-group">
                    Add Pet age:
                    <InputNumber @bind-Value="newPet.Age"/>
                </div>
                <div class="mt-2">
                    <p class="actions">
                        <button class="btn btn-outline-success" type="button" @onclick=@(() => AddNewPersonalPet())>Add Personal Pet</button>
                    </p>
                </div>
            </EditForm>
            <div class="mt-2">
                <p class="actions">
                    <button class="btn btn-outline-success" type="button" @onclick=@(() => AddNewChild())>Add Child</button>
                </p>
            </div>
        </div>
    </div>
    <div class="d-flex flex-column ml-3 mr-3 mt-5">
        @* container for family pets form*@
        <div class="d-flex flex-column">
            <h3>Add family pet</h3>
            <EditForm Model="@newFamilyPet">
                <div>
                    <p class="text-info">Added family pets: @familyPetMessage</p>
                </div>
                <div class="form-group">
                    Add Pet Name:
                    <InputText @bind-Value="newFamilyPet.Name"/>
                </div>
                <div class="form-group">
                    Add Pet Species:
                    <InputText @bind-Value="newFamilyPet.Species"/>
                </div>
                <div class="form-group">
                    Add Pet age:
                    <InputNumber @bind-Value="newFamilyPet.Age"/>
                </div>
                <div class="mt-2">
                    <p class="actions">
                        <button class="btn btn-outline-success" type="button" @onclick=@(() => AddNewFamilyPet())>Add Family Pet</button>
                    </p>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    
    private Family newFamily = new Family();
    private string firstAdult;
    private string secondAdult;
    
    private IList<Adult> singleAdults = new List<Adult>();
    private IList<ChildInterest> childInterests = new List<ChildInterest>();
    private IList<Pet> pets = new List<Pet>();
    private IList<Child> children = new List<Child>();
    private IList<Pet> familyPets = new List<Pet>();
    
    private Child newChild = new Child();
    private string interestMessage="", petMessage="", interestString, childrenMessage="", familyPetMessage="";
    private Pet newPet = new Pet();
    private Pet newFamilyPet = new Pet();
    
    
    
    protected override async Task OnInitializedAsync()
    {
        IList<int> adultsInFamilies = await FamilyService.AdultsInFamiliesAsync();
        IList<Adult> adults = await AdultService.GetAdultsAsync();
        foreach (var adult in adults)
        {
            if(!adultsInFamilies.Contains(adult.Id))
                singleAdults.Add(adult);
        }
        childInterests.Clear();
        pets.Clear();
        children.Clear();
    }

    private async void AddNewFamily()
    {
    //adds a new family type object to the file 
        if (firstAdult != null)
        {
            string[] str = firstAdult.Split(" ");
            int id1 = Int32.Parse(str.ElementAt(0));
            IList<Adult> adults = await AdultService.GetAdultsAsync();
            Adult adult = adults.First((adult1 => adult1.Id==id1));
            newFamily.Adults.Add(adult);
        }
        if (secondAdult != null && secondAdult!=firstAdult)
        {
            string[] str = secondAdult.Split(" ");
            int id = Int32.Parse(str.ElementAt(0));
            IList<Adult> adults = await AdultService.GetAdultsAsync();
            Adult adult = adults.First((adult1 => adult1.Id==id));
            newFamily.Adults.Add(adult);
        }
        if(children!=null)
            if (children.Count != 0)
                newFamily.Children = children.ToList();
        if(familyPets!=null)
            if (familyPets.Count != 0)
                newFamily.Pets = familyPets.ToList();
        await FamilyService.AddFamilyAsync(newFamily);
        NavigationManager.NavigateTo("/Families");
    }

    private void AddNewInterest()
    {
    //modify interest message and saves the new interest in the list of interests
        if (interestMessage.Equals(""))
        {
            interestMessage += interestString;
        }
        else
        {
            interestMessage += ", " + interestString;
        }
        ChildInterest ci = new ChildInterest();
        ci.InterestId = interestString;
        childInterests.Add(ci);
    }

    private void AddNewPersonalPet()
    {
    //change message and add pet to list of pets
        if (petMessage.Equals(""))
        {
            petMessage += newPet.Name;
        }
        else
        {
            petMessage += ", "+newPet.Name;
        }
        pets.Add(newPet);
    }

    private void AddNewChild()
    {
    //adds the pets and interests, then adds child to the list of children
        if (childrenMessage.Equals(""))
        {
            childrenMessage += newChild.FirstName + " " + newChild.LastName;
        }
        else
        {
            childrenMessage += ", " + newChild.FirstName + " " + newChild.LastName;
        }
        Child child = newChild;
        child.Pets =pets.ToList();
        child.ChildInterests =childInterests.ToList();
        children.Add(child);
    //clear lists in case of new child being added
        childInterests.Clear();
        pets.Clear();
        petMessage = "";
        interestMessage = "";
    }

    private void AddNewFamilyPet()
    {
        if (familyPetMessage.Equals(""))
        {
            familyPetMessage += newFamilyPet.Name;
        }
        else
        {
            familyPetMessage += ", " + newFamilyPet.Name;
        }
        familyPets.Add(newFamilyPet);
    }
    
}